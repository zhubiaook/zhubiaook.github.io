<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LinuxSystemProgramming on blog</title>
    <link>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/</link>
    <description>Recent content in LinuxSystemProgramming on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.zybz.fun/posts/linux/linuxsystemprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>内存管理</title>
      <link>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/memory_management/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/memory_management/</guid>
      <description>内存结构 动态内存分配  void *malloc(int size);
动态分配内存， 单位字节
 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unistd.h&amp;gt; int main(void) { char *p, ret; p = malloc(2048); if(!p) perror(&amp;#34;malloc&amp;#34;); ret = execl(&amp;#34;/usr/bin/ping&amp;#34;, &amp;#34;ping&amp;#34;, &amp;#34;www.baidu.com&amp;#34;, NULL); if(ret == -1) perror(&amp;#34;execl&amp;#34;); }  void *calloc(int nr, int size);
为数组分配内存，且将分配到的内存置为0
 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; int main(void) { int *x, *y; /* 以下两种方法分配到的内存一样大 */ x = malloc(256*sizeof(int)); if(!x) { perror(&amp;#34;malloc&amp;#34;); return -1; } /* 将分配到的内存置为0 */ y = calloc(256, sizeof(int)); if(!</description>
    </item>
    
    <item>
      <title>文件IO管理</title>
      <link>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/file_io_management/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/file_io_management/</guid>
      <description>文件读写 - 系统调用  int open(const char *name, int flags, mode_t mode);
flags: O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, &amp;hellip;
 #include &amp;lt;fcntl.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; int main(void) { int fd; fd = open(&amp;#34;/opt/c/hello.txt&amp;#34;, O_RDONLY); if (fd == -1) perror(&amp;#34;Error&amp;#34;); else printf(&amp;#34;%d&amp;#34;, fd); }  int create(const char *name, mode_t mode);
 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; int main(void) { int fd; fd = creat(&amp;#34;/opt/c/1.txt&amp;#34;, 0644); // 等同于  // fd = open(&amp;#34;/opt/c/1.txt&amp;#34;, O_WRONLY | O_CREATE | O_TRUNC, 0644);  return 0; }  int read(int fd, void *buf, int len);</description>
    </item>
    
    <item>
      <title>文件和目录管理</title>
      <link>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/file_and_directory_management/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/file_and_directory_management/</guid>
      <description>文件及元数据 基本属性  stat结构体
 struct stat { dev_t st_dev; // ID of device containing file  ino_t st_ino; // inode number  mode_t st_mode; // permissions  nlink_t st_nlink; // number of hard link  uid_t st_uid; // user ID of owner  gid_t st_gid; // group ID of owner  dev_t st_rdev; // device ID  off_t st_size; // total size in bytes  blksize_t st_blksize; // blocksize for filesystem I/O  blkcnt_t st_blocks; // number of blocks allocated  time_t st_atime; // last access time  time_t st_mtime; // last modification time  time_t st_ctime; // last status change time }  int stat(const char *path, struct stat *buf);</description>
    </item>
    
    <item>
      <title>进程管理</title>
      <link>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/process_management/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/linux/linuxsystemprogramming/process_management/</guid>
      <description>创建并运行新进程 fork(), execl(), exit(), getpid(), getppid()  fork(): 当前进程（父进程）创建一个新的进程（子进程），创建后的父、子进程继续执行fork()调用点后面的程序，当然也可以使用比如execl() 来替换后续要执行的程序。
execl(): 替换当前进程后续要执行的程序（从execl()调用点后续的程序被替换，也就是说原来在execl()调用点后面的程序不再执行，而去执行execl参数中指定的程序）。
exit(): 终止一个进程，将进程占用的所有资源（内存，文件描述符）交还内核，由其进行再次分配。
getpid(): 获取当前进程PID
getppid(): 获取父进程PID
 /* * 获取当前进程pid: int getpid(); * 获取父进程pid: int getppid(); * 执行新的程序: int execl(char *path, char *arg, ...); * 创建子进程: int fork(); * 终止进程: void exit(int status); */ #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; int main(void) { long pid; pid = fork(); /* fork执行错误 */ if(pid == -1) { perror(&amp;#34;fork&amp;#34;); exit(EXIT_FAILURE); } /* parent */ if(pid &amp;gt; 0) { int pret; printf(&amp;#34;pid: %d, child_pid: %d\n&amp;#34;, getpid(), pid); pret = execl(&amp;#34;/usr/bin/sleep&amp;#34;,&amp;#34;sleep&amp;#34;, &amp;#34;100&amp;#34;, NULL); if(pret == -1) { perror(&amp;#34;parent execl&amp;#34;); exit(EXIT_FAILURE); } } /* child */ if(pid == 0) { int cret; printf(&amp;#34;pid: %d, parent_pid: %d\n&amp;#34;, getpid(), getppid()); cret = execl(&amp;#34;/usr/bin/sleep&amp;#34;,&amp;#34;sleep&amp;#34;, &amp;#34;100&amp;#34;, NULL); if(cret == -1) { perror(&amp;#34;child execl&amp;#34;); exit(EXIT_FAILURE); } } } 输出</description>
    </item>
    
  </channel>
</rss>