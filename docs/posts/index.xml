<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>posts on blog</title>
    <link>https://blog.zybz.fun/posts/</link>
    <description>Recent content in posts on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.zybz.fun/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Installation</title>
      <link>https://blog.zybz.fun/posts/hugo/</link>
      <pubDate>Mon, 31 Aug 2020 17:22:09 +0800</pubDate>
      
      <guid>https://blog.zybz.fun/posts/hugo/</guid>
      <description>Requirements Hugo Version 0.68.0 or higher
Installation Create your site if you haven’t already
hugo new site my-site -f=yaml cd my-site git init Add the theme as git sub-module
git submodule add https://github.com/hossainemruz/toha.git themes/toha  Don’t use SSH URL of the theme during adding as git sub-module. Also, don’t clone the theme in your themes directory using git clone. They don’t work well with Github Action or Netlify.
 If you want to customize the theme templates, then fork it and use the fork as your theme.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.zybz.fun/posts/k8s%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/k8s%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5/</guid>
      <description>K8S 部署策略 参考文档 Kubernetes 部署策略详解-博客-阳明 Kubernetes deployment strategies - github
部署策略 1. Recreate(重建) 2. RollingUpdate(滚动更新) 3. Blue/Green(蓝/绿) 4. Canary(金丝雀) 5. A/B testing(A/B测试) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.zybz.fun/posts/v-model-%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/v-model-%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A-/</guid>
      <description>v-model 双向数据绑定  v-model 指令监听用户输入控件的值，根据不同的控件读取相应的值来更新绑定的数据，绑定的数据也会更改控件的值。
 参考文档 http://www.imooc.com/wiki/vuelesson/vueforms.html
基本用法 输入框 &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;input v-model=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{{ name }}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://unpkg.com/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; vm = new Vue({ el : &amp;#34;#app&amp;#34;, data() { return { name: &amp;#34;&amp;#34; } } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 文本框 &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;textarea v-model=&amp;#34;name&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;p&amp;gt;{{ name }}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://unpkg.com/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; vm = new Vue({ el : &amp;#34;#app&amp;#34;, data() { return { name: &amp;#34;&amp;#34; } } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 复选框  多个复选框，绑定的数据初始值设置为列表，控件输入值的变化会修改数据，绑定数据的变化也会修改控件的值</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.zybz.fun/posts/v-on-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zybz.fun/posts/v-on-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>v-on 事件处理  可以用 v-on 指令监听DOM事件，当事件触发时，执行JavaScript代码
 参考文档 http://www.imooc.com/wiki/vuelesson/vueevents.html
基本使用 JS直接写在模板中 &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- JS代码直接写在模板中 --&amp;gt; &amp;lt;button v-on:click=&amp;#34;count += 1&amp;#34;&amp;gt;click&amp;lt;/button&amp;gt; 数量: {{ count }} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; vm = new Vue({ el: &amp;#34;#app&amp;#34;, data() { return { count: 0 } } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 不带参数方法 &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- 使用方法 --&amp;gt; &amp;lt;button v-on:click=&amp;#34;add&amp;#34;&amp;gt;click&amp;lt;/button&amp;gt; 数量: {{ count }} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; vm = new Vue({ el: &amp;#34;#app&amp;#34;, data() { return { count: 0 } }, methods: { add() { this.</description>
    </item>
    
  </channel>
</rss>